name: Build Rootfs Cache
#
# Generates rootfs cache and uploads it to https://github.com/armbian/mirror/releases/tag/_rootfs and https://dl.armbian.com/_rootfs/
#

on:
  schedule:
    - cron: "30 0 1 * *"
  push:
    branches:
      - 'master'
    paths:
      - 'config/distributions/**'
      - 'config/cli/**'
      - 'config/desktop/**'
  workflow_dispatch:
    inputs:
      monthoffset:
        description: Forced month offset
        required: true
        default: 0

jobs:

  release-start:
    permissions:
      contents: none
    name: Release start
    runs-on: [X64]
    outputs:
      rootfscache_version: ${{ steps.env-vars.outputs.rootfscache_version }}
    if: ${{ github.repository_owner == 'Armbian' }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          path: build
          clean: false

      - id: env-vars
        name: Read current version
        run: |
          
          ROOTFSCACHE_VERSION=$(wget -O - -o /dev/null https://github.com/armbian/mirror/releases/download/cache/rootfscache.version)
          ROOTFSCACHE_VERSION=$(( ${ROOTFSCACHE_VERSION:-"0"} + 1 ))
          echo "${ROOTFSCACHE_VERSION}"
          echo "$ROOTFSCACHE_VERSION" | sudo tee rootfscache.version
          echo ::set-output name=rootfscache_version::$(echo ${ROOTFSCACHE_VERSION}) || true

      - uses: dev-drprasad/delete-tag-and-release@v0.2.0
        if: ${{ github.repository_owner == 'Armbian' }}
        with:
          delete_release: true
          repo: "armbian/mirror"
          tag_name: "cache"
        env:
          GITHUB_TOKEN: ${{ secrets.CR_PAT }}

      - name: Updating releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "rootfscache.version"
          repo: "mirror"
          tag: "cache"
          name: "Build in progress"
          bodyFile: "build/.github/Releases-wip.md"
          allowUpdates: true
          removeArtifacts: true
          token: ${{ secrets.CR_PAT }}

  x86-srv:
    needs: [release-start]
    permissions:
      contents: none
    uses: armbian/scripts/.github/workflows/build-cache-v2.yml@master

    with:

      variant: 'server:uefi-x86'
      monthoffset: ${{ inputs.monthoffset }}
      rootfscache_version: ${{ needs.Prepare.outputs.rootfscache_version }}

    secrets:
      PAT1: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  jobsend:
    permissions:
      contents: none
    name: finish
    needs: [x86-srv]
    runs-on: [fast]
    if: ${{ github.repository_owner == 'Armbian' }}
    steps:

      - name: Runner cleanup
        uses: igorpecovnik/freespace@main

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          path: build
          clean: false

      - name: Checkout tracker lists
        uses: actions/checkout@v3
        with:
          fetch-depth: '1'
          repository: ngosang/trackerslist
          path: trackerslist
          clean: false

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_KEY1 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
          workdir: build
          git_user_signingkey: true

      - name: Install SSH key for storage
        uses: shimataro/ssh-key-action@v2
        with:

          key: ${{ secrets.KEY_TORRENTS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
          if_key_exists: replace

      - name: Mount upload folders
        run: |

          sudo mountpoint -q build/cache/rootfs.upload && sudo fusermount -u build/cache/rootfs.upload || true
          sudo apt-get -y -qq install sshfs
          sudo mkdir -p build/cache/rootfs.upload || true
          if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
              sudo mount nas:/tank/armbian/users.armbian.com/upload/rootfs build/cache/rootfs.upload
          else
              sudo sshfs upload@users.armbian.com:/rootfs build/cache/rootfs.upload -o IdentityFile=~/.ssh/id_rsa -o reconnect -o allow_other || true
          fi
          # remove true in sshfs when all runners are on jammy
          sudo df

      - name: Signing
        run: |

          sudo apt-get -y -qq install parallel buildtorrent

          ANNOUNCE=$(cat trackerslist/trackers_best_ip.txt | head -1)ANNOUNCE=$(cat trackerslist/trackers_best_ip.txt | sed '/^$/d' | shuf -n 1)
          TRACKERS=$(cat trackerslist/trackers_all.txt | sed '/^\s*$/d' | while read line; do printf ",""${line}"; done | cut -c 2-)
          #WEBSEEDS="--webseeds=https://github.com/armbian/mirror/releases/download/_rootfs/$FILE,https://imola.armbian.com/dl/_rootfs/$FILE,https://stpete-mirror.armbian.com/dl/_rootfs/$FILE"
          WEBSEEDS="--webseeds=$(curl -s https://cache.armbian.com/mirrors | jq -r '.'default' | .[] | values' | sed -e 's/$/\$FILE/' |  tr '\n' , | sed 's/.$//')"
          cd build/cache/rootfs.upload
          FILES=$(ls -1 *.lz4)
          for FILE in ${FILES[@]}
          do
          if [[ ! -f $FILE.asc ]]; then
              echo "$FILE"
          fi
          done | sudo --preserve-env parallel --jobs 18 '
              echo "Signing {} "; echo ${{ secrets.GPG_PASSPHRASE1 }} | gpg --quiet --armor --batch --yes --passphrase-fd 0 --detach-sign --pinentry-mode loopback {};
              echo "Generating {}.torrent "; buildtorrent -q -s -m '$WEBSEEDS' --announce="'$ANNOUNCE'" --announcelist="'$TRACKERS'" {} -c "Armbian rootfs cache" {}.torrent >/dev/null
          '

          # Update version
          echo "${{ needs.Prepare.outputs.rootfscache_version }}" | sudo tee rootfscache.version

      - name: Upload
        uses: ncipollo/release-action@v1
        if: ${{ github.repository_owner == 'Armbian' }}
        with:
          repo: "mirror"
          artifacts: "build/cache/rootfs.upload/*.torrent,build/cache/rootfs.upload/*.asc,build/cache/rootfs.upload/rootfscache.version"
          tag: "cache"
          bodyFile: "build/.github/Releases.md"
          name: "Rootfs cache"
          allowUpdates: true
          token: ${{ secrets.CR_PAT }}

      - name: Unmount folders

        run: |

          sudo mountpoint -q build/cache/rootfs && sudo fusermount -u build/cache/rootfs || true
          sudo mountpoint -q build/cache/rootfs.upload && sudo fusermount -u build/cache/rootfs.upload || true
